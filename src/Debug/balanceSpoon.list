
balanceSpoon.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .sram_code    00000000  20000000  20000000  000108cc  2**0
                  CONTENTS
  1 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         0000072c  08000198  08000198  00010198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00000000  080008c4  080008cc  000108cc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  4 .ARM.extab    00000000  080008c4  080008c4  000108cc  2**0
                  CONTENTS
  5 .ARM          00000000  080008c4  080008c4  000108cc  2**0
                  CONTENTS
  6 .preinit_array 00000000  080008c4  080008cc  000108cc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  7 .init_array   00000004  080008c4  080008c4  000108c4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .fini_array   00000004  080008c8  080008c8  000108c8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .data         00000000  20000000  20000000  000108cc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
 10 .bss          0000001c  20000000  080008cc  00020000  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000001c  080008cc  0002001c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000108cc  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  000108fc  2**0
                  CONTENTS, READONLY
 14 .debug_info   0000094d  00000000  00000000  0001093f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00000285  00000000  00000000  0001128c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00000098  00000000  00000000  00011518  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00000067  00000000  00000000  000115b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  000020a9  00000000  00000000  00011617  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   00000fd7  00000000  00000000  000136c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    0000848a  00000000  00000000  00014697  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00000178  00000000  00000000  0001cb24  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000004a  00000000  00000000  0001cc9c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	20000000 	.word	0x20000000
 80001b4:	00000000 	.word	0x00000000
 80001b8:	080008ac 	.word	0x080008ac

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000004 	.word	0x20000004
 80001d4:	080008ac 	.word	0x080008ac

080001d8 <main>:
	for (volatile int i = 0; i < 100000; i++) {

	}
}

int main(void) {
 80001d8:	b580      	push	{r7, lr}
 80001da:	b09e      	sub	sp, #120	; 0x78
 80001dc:	af00      	add	r7, sp, #0
	/* Loop forever */
	setSpeedClock();
 80001de:	f000 fab3 	bl	8000748 <setSpeedClock>

	GPIO_HANDLE gpioB;
	gpioB.pGPIO = GPIOB;
 80001e2:	4bc6      	ldr	r3, [pc, #792]	; (80004fc <main+0x324>)
 80001e4:	60fb      	str	r3, [r7, #12]
	gpioB.GPIO_PIN_NUMBER = 12;
 80001e6:	230c      	movs	r3, #12
 80001e8:	743b      	strb	r3, [r7, #16]
	gpioB.GPIO_MODE = OUTPUT;
 80001ea:	2301      	movs	r3, #1
 80001ec:	747b      	strb	r3, [r7, #17]
	gpioB.GPIO_OUTPUT_TYPE = PUSHPULL;
 80001ee:	2300      	movs	r3, #0
 80001f0:	74bb      	strb	r3, [r7, #18]
	gpioB.GPIO_OUTPUT_SPEED = HIGH_SPEED;
 80001f2:	2303      	movs	r3, #3
 80001f4:	74fb      	strb	r3, [r7, #19]
	initGPIO(&gpioB);
 80001f6:	f107 030c 	add.w	r3, r7, #12
 80001fa:	4618      	mov	r0, r3
 80001fc:	f000 fa06 	bl	800060c <initGPIO>

	GPIO_HANDLE gpioC;
	gpioC.pGPIO = GPIOC;
 8000200:	4bbf      	ldr	r3, [pc, #764]	; (8000500 <main+0x328>)
 8000202:	603b      	str	r3, [r7, #0]
	gpioC.GPIO_PIN_NUMBER = 14;
 8000204:	230e      	movs	r3, #14
 8000206:	713b      	strb	r3, [r7, #4]
	gpioC.GPIO_MODE = OUTPUT;
 8000208:	2301      	movs	r3, #1
 800020a:	717b      	strb	r3, [r7, #5]
	gpioC.GPIO_OUTPUT_TYPE = PUSHPULL;
 800020c:	2300      	movs	r3, #0
 800020e:	71bb      	strb	r3, [r7, #6]
	gpioC.GPIO_OUTPUT_SPEED = HIGH_SPEED;
 8000210:	2303      	movs	r3, #3
 8000212:	71fb      	strb	r3, [r7, #7]
	initGPIO(&gpioC);
 8000214:	463b      	mov	r3, r7
 8000216:	4618      	mov	r0, r3
 8000218:	f000 f9f8 	bl	800060c <initGPIO>
 800021c:	4bb7      	ldr	r3, [pc, #732]	; (80004fc <main+0x324>)
 800021e:	61fb      	str	r3, [r7, #28]
 8000220:	230c      	movs	r3, #12
 8000222:	76fb      	strb	r3, [r7, #27]
 8000224:	2300      	movs	r3, #0
 8000226:	76bb      	strb	r3, [r7, #26]
static inline void __attribute__((always_inline, section(".ramfunc"))) GPIO_write(
		GPIO_REG *pGPIO, uint8_t GPIO_PIN_NUMBER, uint8_t outVal) {
//	pGPIO->GPIOx_ODR = ((pGPIO->GPIOx_ODR & ~(1 << GPIO_PIN_NUMBER))
//			| ((outVal & 1) << GPIO_PIN_NUMBER));
	pGPIO->GPIOx_BSRR =
			(outVal & 1) ?
 8000228:	7ebb      	ldrb	r3, [r7, #26]
 800022a:	f003 0301 	and.w	r3, r3, #1
					(1 << GPIO_PIN_NUMBER) : (1 << (GPIO_PIN_NUMBER + 16));
 800022e:	2b00      	cmp	r3, #0
 8000230:	d005      	beq.n	800023e <main+0x66>
 8000232:	7efb      	ldrb	r3, [r7, #27]
 8000234:	2201      	movs	r2, #1
 8000236:	fa02 f303 	lsl.w	r3, r2, r3
 800023a:	461a      	mov	r2, r3
 800023c:	e005      	b.n	800024a <main+0x72>
 800023e:	7efb      	ldrb	r3, [r7, #27]
 8000240:	3310      	adds	r3, #16
 8000242:	2201      	movs	r2, #1
 8000244:	fa02 f303 	lsl.w	r3, r2, r3
 8000248:	461a      	mov	r2, r3
	pGPIO->GPIOx_BSRR =
 800024a:	69fb      	ldr	r3, [r7, #28]
 800024c:	619a      	str	r2, [r3, #24]
}
 800024e:	bf00      	nop
 8000250:	4baa      	ldr	r3, [pc, #680]	; (80004fc <main+0x324>)
 8000252:	627b      	str	r3, [r7, #36]	; 0x24
 8000254:	230c      	movs	r3, #12
 8000256:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800025a:	2301      	movs	r3, #1
 800025c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
			(outVal & 1) ?
 8000260:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8000264:	f003 0301 	and.w	r3, r3, #1
					(1 << GPIO_PIN_NUMBER) : (1 << (GPIO_PIN_NUMBER + 16));
 8000268:	2b00      	cmp	r3, #0
 800026a:	d006      	beq.n	800027a <main+0xa2>
 800026c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8000270:	2201      	movs	r2, #1
 8000272:	fa02 f303 	lsl.w	r3, r2, r3
 8000276:	461a      	mov	r2, r3
 8000278:	e006      	b.n	8000288 <main+0xb0>
 800027a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800027e:	3310      	adds	r3, #16
 8000280:	2201      	movs	r2, #1
 8000282:	fa02 f303 	lsl.w	r3, r2, r3
 8000286:	461a      	mov	r2, r3
	pGPIO->GPIOx_BSRR =
 8000288:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800028a:	619a      	str	r2, [r3, #24]
}
 800028c:	bf00      	nop
 800028e:	4b9c      	ldr	r3, [pc, #624]	; (8000500 <main+0x328>)
 8000290:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000292:	230e      	movs	r3, #14
 8000294:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8000298:	2300      	movs	r3, #0
 800029a:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
			(outVal & 1) ?
 800029e:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 80002a2:	f003 0301 	and.w	r3, r3, #1
					(1 << GPIO_PIN_NUMBER) : (1 << (GPIO_PIN_NUMBER + 16));
 80002a6:	2b00      	cmp	r3, #0
 80002a8:	d006      	beq.n	80002b8 <main+0xe0>
 80002aa:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80002ae:	2201      	movs	r2, #1
 80002b0:	fa02 f303 	lsl.w	r3, r2, r3
 80002b4:	461a      	mov	r2, r3
 80002b6:	e006      	b.n	80002c6 <main+0xee>
 80002b8:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80002bc:	3310      	adds	r3, #16
 80002be:	2201      	movs	r2, #1
 80002c0:	fa02 f303 	lsl.w	r3, r2, r3
 80002c4:	461a      	mov	r2, r3
	pGPIO->GPIOx_BSRR =
 80002c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80002c8:	619a      	str	r2, [r3, #24]
}
 80002ca:	bf00      	nop
 80002cc:	4b8c      	ldr	r3, [pc, #560]	; (8000500 <main+0x328>)
 80002ce:	637b      	str	r3, [r7, #52]	; 0x34
 80002d0:	230e      	movs	r3, #14
 80002d2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80002d6:	2301      	movs	r3, #1
 80002d8:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
			(outVal & 1) ?
 80002dc:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 80002e0:	f003 0301 	and.w	r3, r3, #1
					(1 << GPIO_PIN_NUMBER) : (1 << (GPIO_PIN_NUMBER + 16));
 80002e4:	2b00      	cmp	r3, #0
 80002e6:	d006      	beq.n	80002f6 <main+0x11e>
 80002e8:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80002ec:	2201      	movs	r2, #1
 80002ee:	fa02 f303 	lsl.w	r3, r2, r3
 80002f2:	461a      	mov	r2, r3
 80002f4:	e006      	b.n	8000304 <main+0x12c>
 80002f6:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80002fa:	3310      	adds	r3, #16
 80002fc:	2201      	movs	r2, #1
 80002fe:	fa02 f303 	lsl.w	r3, r2, r3
 8000302:	461a      	mov	r2, r3
	pGPIO->GPIOx_BSRR =
 8000304:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000306:	619a      	str	r2, [r3, #24]
}
 8000308:	bf00      	nop
 800030a:	4b7d      	ldr	r3, [pc, #500]	; (8000500 <main+0x328>)
 800030c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800030e:	230e      	movs	r3, #14
 8000310:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8000314:	2301      	movs	r3, #1
 8000316:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
			(outVal & 1) ?
 800031a:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
 800031e:	f003 0301 	and.w	r3, r3, #1
					(1 << GPIO_PIN_NUMBER) : (1 << (GPIO_PIN_NUMBER + 16));
 8000322:	2b00      	cmp	r3, #0
 8000324:	d006      	beq.n	8000334 <main+0x15c>
 8000326:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800032a:	2201      	movs	r2, #1
 800032c:	fa02 f303 	lsl.w	r3, r2, r3
 8000330:	461a      	mov	r2, r3
 8000332:	e006      	b.n	8000342 <main+0x16a>
 8000334:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8000338:	3310      	adds	r3, #16
 800033a:	2201      	movs	r2, #1
 800033c:	fa02 f303 	lsl.w	r3, r2, r3
 8000340:	461a      	mov	r2, r3
	pGPIO->GPIOx_BSRR =
 8000342:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000344:	619a      	str	r2, [r3, #24]
}
 8000346:	bf00      	nop
 8000348:	4b6d      	ldr	r3, [pc, #436]	; (8000500 <main+0x328>)
 800034a:	647b      	str	r3, [r7, #68]	; 0x44
 800034c:	230e      	movs	r3, #14
 800034e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8000352:	2300      	movs	r3, #0
 8000354:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
			(outVal & 1) ?
 8000358:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
 800035c:	f003 0301 	and.w	r3, r3, #1
					(1 << GPIO_PIN_NUMBER) : (1 << (GPIO_PIN_NUMBER + 16));
 8000360:	2b00      	cmp	r3, #0
 8000362:	d006      	beq.n	8000372 <main+0x19a>
 8000364:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8000368:	2201      	movs	r2, #1
 800036a:	fa02 f303 	lsl.w	r3, r2, r3
 800036e:	461a      	mov	r2, r3
 8000370:	e006      	b.n	8000380 <main+0x1a8>
 8000372:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8000376:	3310      	adds	r3, #16
 8000378:	2201      	movs	r2, #1
 800037a:	fa02 f303 	lsl.w	r3, r2, r3
 800037e:	461a      	mov	r2, r3
	pGPIO->GPIOx_BSRR =
 8000380:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000382:	619a      	str	r2, [r3, #24]
}
 8000384:	bf00      	nop
 8000386:	4b5d      	ldr	r3, [pc, #372]	; (80004fc <main+0x324>)
 8000388:	64fb      	str	r3, [r7, #76]	; 0x4c
 800038a:	230c      	movs	r3, #12
 800038c:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
 8000390:	2301      	movs	r3, #1
 8000392:	f887 304a 	strb.w	r3, [r7, #74]	; 0x4a
			(outVal & 1) ?
 8000396:	f897 304a 	ldrb.w	r3, [r7, #74]	; 0x4a
 800039a:	f003 0301 	and.w	r3, r3, #1
					(1 << GPIO_PIN_NUMBER) : (1 << (GPIO_PIN_NUMBER + 16));
 800039e:	2b00      	cmp	r3, #0
 80003a0:	d006      	beq.n	80003b0 <main+0x1d8>
 80003a2:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 80003a6:	2201      	movs	r2, #1
 80003a8:	fa02 f303 	lsl.w	r3, r2, r3
 80003ac:	461a      	mov	r2, r3
 80003ae:	e006      	b.n	80003be <main+0x1e6>
 80003b0:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 80003b4:	3310      	adds	r3, #16
 80003b6:	2201      	movs	r2, #1
 80003b8:	fa02 f303 	lsl.w	r3, r2, r3
 80003bc:	461a      	mov	r2, r3
	pGPIO->GPIOx_BSRR =
 80003be:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80003c0:	619a      	str	r2, [r3, #24]
}
 80003c2:	bf00      	nop
 80003c4:	4b4d      	ldr	r3, [pc, #308]	; (80004fc <main+0x324>)
 80003c6:	657b      	str	r3, [r7, #84]	; 0x54
 80003c8:	230c      	movs	r3, #12
 80003ca:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
 80003ce:	2300      	movs	r3, #0
 80003d0:	f887 3052 	strb.w	r3, [r7, #82]	; 0x52
			(outVal & 1) ?
 80003d4:	f897 3052 	ldrb.w	r3, [r7, #82]	; 0x52
 80003d8:	f003 0301 	and.w	r3, r3, #1
					(1 << GPIO_PIN_NUMBER) : (1 << (GPIO_PIN_NUMBER + 16));
 80003dc:	2b00      	cmp	r3, #0
 80003de:	d006      	beq.n	80003ee <main+0x216>
 80003e0:	f897 3053 	ldrb.w	r3, [r7, #83]	; 0x53
 80003e4:	2201      	movs	r2, #1
 80003e6:	fa02 f303 	lsl.w	r3, r2, r3
 80003ea:	461a      	mov	r2, r3
 80003ec:	e006      	b.n	80003fc <main+0x224>
 80003ee:	f897 3053 	ldrb.w	r3, [r7, #83]	; 0x53
 80003f2:	3310      	adds	r3, #16
 80003f4:	2201      	movs	r2, #1
 80003f6:	fa02 f303 	lsl.w	r3, r2, r3
 80003fa:	461a      	mov	r2, r3
	pGPIO->GPIOx_BSRR =
 80003fc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80003fe:	619a      	str	r2, [r3, #24]
}
 8000400:	bf00      	nop
 8000402:	4b3f      	ldr	r3, [pc, #252]	; (8000500 <main+0x328>)
 8000404:	65fb      	str	r3, [r7, #92]	; 0x5c
 8000406:	230e      	movs	r3, #14
 8000408:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b
 800040c:	2301      	movs	r3, #1
 800040e:	f887 305a 	strb.w	r3, [r7, #90]	; 0x5a
			(outVal & 1) ?
 8000412:	f897 305a 	ldrb.w	r3, [r7, #90]	; 0x5a
 8000416:	f003 0301 	and.w	r3, r3, #1
					(1 << GPIO_PIN_NUMBER) : (1 << (GPIO_PIN_NUMBER + 16));
 800041a:	2b00      	cmp	r3, #0
 800041c:	d006      	beq.n	800042c <main+0x254>
 800041e:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
 8000422:	2201      	movs	r2, #1
 8000424:	fa02 f303 	lsl.w	r3, r2, r3
 8000428:	461a      	mov	r2, r3
 800042a:	e006      	b.n	800043a <main+0x262>
 800042c:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
 8000430:	3310      	adds	r3, #16
 8000432:	2201      	movs	r2, #1
 8000434:	fa02 f303 	lsl.w	r3, r2, r3
 8000438:	461a      	mov	r2, r3
	pGPIO->GPIOx_BSRR =
 800043a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800043c:	619a      	str	r2, [r3, #24]
}
 800043e:	bf00      	nop
 8000440:	4b2f      	ldr	r3, [pc, #188]	; (8000500 <main+0x328>)
 8000442:	667b      	str	r3, [r7, #100]	; 0x64
 8000444:	230e      	movs	r3, #14
 8000446:	f887 3063 	strb.w	r3, [r7, #99]	; 0x63
 800044a:	2300      	movs	r3, #0
 800044c:	f887 3062 	strb.w	r3, [r7, #98]	; 0x62
			(outVal & 1) ?
 8000450:	f897 3062 	ldrb.w	r3, [r7, #98]	; 0x62
 8000454:	f003 0301 	and.w	r3, r3, #1
					(1 << GPIO_PIN_NUMBER) : (1 << (GPIO_PIN_NUMBER + 16));
 8000458:	2b00      	cmp	r3, #0
 800045a:	d006      	beq.n	800046a <main+0x292>
 800045c:	f897 3063 	ldrb.w	r3, [r7, #99]	; 0x63
 8000460:	2201      	movs	r2, #1
 8000462:	fa02 f303 	lsl.w	r3, r2, r3
 8000466:	461a      	mov	r2, r3
 8000468:	e006      	b.n	8000478 <main+0x2a0>
 800046a:	f897 3063 	ldrb.w	r3, [r7, #99]	; 0x63
 800046e:	3310      	adds	r3, #16
 8000470:	2201      	movs	r2, #1
 8000472:	fa02 f303 	lsl.w	r3, r2, r3
 8000476:	461a      	mov	r2, r3
	pGPIO->GPIOx_BSRR =
 8000478:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800047a:	619a      	str	r2, [r3, #24]
}
 800047c:	bf00      	nop
 800047e:	4b1f      	ldr	r3, [pc, #124]	; (80004fc <main+0x324>)
 8000480:	66fb      	str	r3, [r7, #108]	; 0x6c
 8000482:	230c      	movs	r3, #12
 8000484:	f887 306b 	strb.w	r3, [r7, #107]	; 0x6b
 8000488:	2301      	movs	r3, #1
 800048a:	f887 306a 	strb.w	r3, [r7, #106]	; 0x6a
			(outVal & 1) ?
 800048e:	f897 306a 	ldrb.w	r3, [r7, #106]	; 0x6a
 8000492:	f003 0301 	and.w	r3, r3, #1
					(1 << GPIO_PIN_NUMBER) : (1 << (GPIO_PIN_NUMBER + 16));
 8000496:	2b00      	cmp	r3, #0
 8000498:	d006      	beq.n	80004a8 <main+0x2d0>
 800049a:	f897 306b 	ldrb.w	r3, [r7, #107]	; 0x6b
 800049e:	2201      	movs	r2, #1
 80004a0:	fa02 f303 	lsl.w	r3, r2, r3
 80004a4:	461a      	mov	r2, r3
 80004a6:	e006      	b.n	80004b6 <main+0x2de>
 80004a8:	f897 306b 	ldrb.w	r3, [r7, #107]	; 0x6b
 80004ac:	3310      	adds	r3, #16
 80004ae:	2201      	movs	r2, #1
 80004b0:	fa02 f303 	lsl.w	r3, r2, r3
 80004b4:	461a      	mov	r2, r3
	pGPIO->GPIOx_BSRR =
 80004b6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80004b8:	619a      	str	r2, [r3, #24]
}
 80004ba:	bf00      	nop
 80004bc:	4b0f      	ldr	r3, [pc, #60]	; (80004fc <main+0x324>)
 80004be:	677b      	str	r3, [r7, #116]	; 0x74
 80004c0:	230c      	movs	r3, #12
 80004c2:	f887 3073 	strb.w	r3, [r7, #115]	; 0x73
 80004c6:	2300      	movs	r3, #0
 80004c8:	f887 3072 	strb.w	r3, [r7, #114]	; 0x72
			(outVal & 1) ?
 80004cc:	f897 3072 	ldrb.w	r3, [r7, #114]	; 0x72
 80004d0:	f003 0301 	and.w	r3, r3, #1
					(1 << GPIO_PIN_NUMBER) : (1 << (GPIO_PIN_NUMBER + 16));
 80004d4:	2b00      	cmp	r3, #0
 80004d6:	d006      	beq.n	80004e6 <main+0x30e>
 80004d8:	f897 3073 	ldrb.w	r3, [r7, #115]	; 0x73
 80004dc:	2201      	movs	r2, #1
 80004de:	fa02 f303 	lsl.w	r3, r2, r3
 80004e2:	461a      	mov	r2, r3
 80004e4:	e006      	b.n	80004f4 <main+0x31c>
 80004e6:	f897 3073 	ldrb.w	r3, [r7, #115]	; 0x73
 80004ea:	3310      	adds	r3, #16
 80004ec:	2201      	movs	r2, #1
 80004ee:	fa02 f303 	lsl.w	r3, r2, r3
 80004f2:	461a      	mov	r2, r3
	pGPIO->GPIOx_BSRR =
 80004f4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80004f6:	619a      	str	r2, [r3, #24]
}
 80004f8:	bf00      	nop
	while (1) {
		GPIO_write(GPIOB, 12, LOW);
 80004fa:	e68f      	b.n	800021c <main+0x44>
 80004fc:	40020400 	.word	0x40020400
 8000500:	40020800 	.word	0x40020800

08000504 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000504:	480d      	ldr	r0, [pc, #52]	; (800053c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000506:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000508:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800050c:	480c      	ldr	r0, [pc, #48]	; (8000540 <LoopForever+0x6>)
  ldr r1, =_edata
 800050e:	490d      	ldr	r1, [pc, #52]	; (8000544 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000510:	4a0d      	ldr	r2, [pc, #52]	; (8000548 <LoopForever+0xe>)
  movs r3, #0
 8000512:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000514:	e002      	b.n	800051c <LoopCopyDataInit>

08000516 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000516:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000518:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800051a:	3304      	adds	r3, #4

0800051c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800051c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800051e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000520:	d3f9      	bcc.n	8000516 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000522:	4a0a      	ldr	r2, [pc, #40]	; (800054c <LoopForever+0x12>)
  ldr r4, =_ebss
 8000524:	4c0a      	ldr	r4, [pc, #40]	; (8000550 <LoopForever+0x16>)
  movs r3, #0
 8000526:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000528:	e001      	b.n	800052e <LoopFillZerobss>

0800052a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800052a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800052c:	3204      	adds	r2, #4

0800052e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800052e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000530:	d3fb      	bcc.n	800052a <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000532:	f000 f997 	bl	8000864 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000536:	f7ff fe4f 	bl	80001d8 <main>

0800053a <LoopForever>:

LoopForever:
  b LoopForever
 800053a:	e7fe      	b.n	800053a <LoopForever>
  ldr   r0, =_estack
 800053c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000540:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000544:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 8000548:	080008cc 	.word	0x080008cc
  ldr r2, =_sbss
 800054c:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 8000550:	2000001c 	.word	0x2000001c

08000554 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000554:	e7fe      	b.n	8000554 <ADC_IRQHandler>
	...

08000558 <GPIO_ClockControl>:
 *      Author: ADMIN
 */

#include "stm32f411ceu6_GPIO.h"

void GPIO_ClockControl(GPIO_REG *pGPIOxReg) {
 8000558:	b480      	push	{r7}
 800055a:	b083      	sub	sp, #12
 800055c:	af00      	add	r7, sp, #0
 800055e:	6078      	str	r0, [r7, #4]

	if (pGPIOxReg == GPIOA) {
 8000560:	687b      	ldr	r3, [r7, #4]
 8000562:	4a23      	ldr	r2, [pc, #140]	; (80005f0 <GPIO_ClockControl+0x98>)
 8000564:	4293      	cmp	r3, r2
 8000566:	d106      	bne.n	8000576 <GPIO_ClockControl+0x1e>
		GPIOA_CLK_EN();
 8000568:	4b22      	ldr	r3, [pc, #136]	; (80005f4 <GPIO_ClockControl+0x9c>)
 800056a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800056c:	4a21      	ldr	r2, [pc, #132]	; (80005f4 <GPIO_ClockControl+0x9c>)
 800056e:	f043 0301 	orr.w	r3, r3, #1
 8000572:	6313      	str	r3, [r2, #48]	; 0x30
	} else if (pGPIOxReg == GPIOE) {
		GPIOE_CLK_EN();
	} else if (pGPIOxReg == GPIOH) {
		GPIOH_CLK_EN();
	}
}
 8000574:	e035      	b.n	80005e2 <GPIO_ClockControl+0x8a>
	} else if (pGPIOxReg == GPIOB) {
 8000576:	687b      	ldr	r3, [r7, #4]
 8000578:	4a1f      	ldr	r2, [pc, #124]	; (80005f8 <GPIO_ClockControl+0xa0>)
 800057a:	4293      	cmp	r3, r2
 800057c:	d106      	bne.n	800058c <GPIO_ClockControl+0x34>
		GPIOB_CLK_EN();
 800057e:	4b1d      	ldr	r3, [pc, #116]	; (80005f4 <GPIO_ClockControl+0x9c>)
 8000580:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000582:	4a1c      	ldr	r2, [pc, #112]	; (80005f4 <GPIO_ClockControl+0x9c>)
 8000584:	f043 0302 	orr.w	r3, r3, #2
 8000588:	6313      	str	r3, [r2, #48]	; 0x30
}
 800058a:	e02a      	b.n	80005e2 <GPIO_ClockControl+0x8a>
	} else if (pGPIOxReg == GPIOC) {
 800058c:	687b      	ldr	r3, [r7, #4]
 800058e:	4a1b      	ldr	r2, [pc, #108]	; (80005fc <GPIO_ClockControl+0xa4>)
 8000590:	4293      	cmp	r3, r2
 8000592:	d106      	bne.n	80005a2 <GPIO_ClockControl+0x4a>
		GPIOC_CLK_EN();
 8000594:	4b17      	ldr	r3, [pc, #92]	; (80005f4 <GPIO_ClockControl+0x9c>)
 8000596:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000598:	4a16      	ldr	r2, [pc, #88]	; (80005f4 <GPIO_ClockControl+0x9c>)
 800059a:	f043 0304 	orr.w	r3, r3, #4
 800059e:	6313      	str	r3, [r2, #48]	; 0x30
}
 80005a0:	e01f      	b.n	80005e2 <GPIO_ClockControl+0x8a>
	} else if (pGPIOxReg == GPIOD) {
 80005a2:	687b      	ldr	r3, [r7, #4]
 80005a4:	4a16      	ldr	r2, [pc, #88]	; (8000600 <GPIO_ClockControl+0xa8>)
 80005a6:	4293      	cmp	r3, r2
 80005a8:	d106      	bne.n	80005b8 <GPIO_ClockControl+0x60>
		GPIOD_CLK_EN();
 80005aa:	4b12      	ldr	r3, [pc, #72]	; (80005f4 <GPIO_ClockControl+0x9c>)
 80005ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005ae:	4a11      	ldr	r2, [pc, #68]	; (80005f4 <GPIO_ClockControl+0x9c>)
 80005b0:	f043 0308 	orr.w	r3, r3, #8
 80005b4:	6313      	str	r3, [r2, #48]	; 0x30
}
 80005b6:	e014      	b.n	80005e2 <GPIO_ClockControl+0x8a>
	} else if (pGPIOxReg == GPIOE) {
 80005b8:	687b      	ldr	r3, [r7, #4]
 80005ba:	4a12      	ldr	r2, [pc, #72]	; (8000604 <GPIO_ClockControl+0xac>)
 80005bc:	4293      	cmp	r3, r2
 80005be:	d106      	bne.n	80005ce <GPIO_ClockControl+0x76>
		GPIOE_CLK_EN();
 80005c0:	4b0c      	ldr	r3, [pc, #48]	; (80005f4 <GPIO_ClockControl+0x9c>)
 80005c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005c4:	4a0b      	ldr	r2, [pc, #44]	; (80005f4 <GPIO_ClockControl+0x9c>)
 80005c6:	f043 0310 	orr.w	r3, r3, #16
 80005ca:	6313      	str	r3, [r2, #48]	; 0x30
}
 80005cc:	e009      	b.n	80005e2 <GPIO_ClockControl+0x8a>
	} else if (pGPIOxReg == GPIOH) {
 80005ce:	687b      	ldr	r3, [r7, #4]
 80005d0:	4a0d      	ldr	r2, [pc, #52]	; (8000608 <GPIO_ClockControl+0xb0>)
 80005d2:	4293      	cmp	r3, r2
 80005d4:	d105      	bne.n	80005e2 <GPIO_ClockControl+0x8a>
		GPIOH_CLK_EN();
 80005d6:	4b07      	ldr	r3, [pc, #28]	; (80005f4 <GPIO_ClockControl+0x9c>)
 80005d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005da:	4a06      	ldr	r2, [pc, #24]	; (80005f4 <GPIO_ClockControl+0x9c>)
 80005dc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80005e0:	6313      	str	r3, [r2, #48]	; 0x30
}
 80005e2:	bf00      	nop
 80005e4:	370c      	adds	r7, #12
 80005e6:	46bd      	mov	sp, r7
 80005e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005ec:	4770      	bx	lr
 80005ee:	bf00      	nop
 80005f0:	40020000 	.word	0x40020000
 80005f4:	40023800 	.word	0x40023800
 80005f8:	40020400 	.word	0x40020400
 80005fc:	40020800 	.word	0x40020800
 8000600:	40020c00 	.word	0x40020c00
 8000604:	40021000 	.word	0x40021000
 8000608:	40021c00 	.word	0x40021c00

0800060c <initGPIO>:

void initGPIO(GPIO_HANDLE *gpioHandle) {
 800060c:	b580      	push	{r7, lr}
 800060e:	b082      	sub	sp, #8
 8000610:	af00      	add	r7, sp, #0
 8000612:	6078      	str	r0, [r7, #4]
	// ENABLE CLOCK

	GPIO_ClockControl(gpioHandle->pGPIO);
 8000614:	687b      	ldr	r3, [r7, #4]
 8000616:	681b      	ldr	r3, [r3, #0]
 8000618:	4618      	mov	r0, r3
 800061a:	f7ff ff9d 	bl	8000558 <GPIO_ClockControl>
	// INIT MODE
	// If it is regular mode
	if (gpioHandle->GPIO_MODE < RISING_EDGE) {
 800061e:	687b      	ldr	r3, [r7, #4]
 8000620:	795b      	ldrb	r3, [r3, #5]
 8000622:	2b03      	cmp	r3, #3
 8000624:	d81f      	bhi.n	8000666 <initGPIO+0x5a>

		gpioHandle->pGPIO->GPIOx_MODER &= ~(0x3
 8000626:	687b      	ldr	r3, [r7, #4]
 8000628:	681b      	ldr	r3, [r3, #0]
 800062a:	681a      	ldr	r2, [r3, #0]
				<< 2 * gpioHandle->GPIO_PIN_NUMBER);
 800062c:	687b      	ldr	r3, [r7, #4]
 800062e:	791b      	ldrb	r3, [r3, #4]
 8000630:	005b      	lsls	r3, r3, #1
 8000632:	2103      	movs	r1, #3
 8000634:	fa01 f303 	lsl.w	r3, r1, r3
		gpioHandle->pGPIO->GPIOx_MODER &= ~(0x3
 8000638:	43db      	mvns	r3, r3
 800063a:	4619      	mov	r1, r3
 800063c:	687b      	ldr	r3, [r7, #4]
 800063e:	681b      	ldr	r3, [r3, #0]
 8000640:	400a      	ands	r2, r1
 8000642:	601a      	str	r2, [r3, #0]
		gpioHandle->pGPIO->GPIOx_MODER |= (gpioHandle->GPIO_MODE
 8000644:	687b      	ldr	r3, [r7, #4]
 8000646:	681b      	ldr	r3, [r3, #0]
 8000648:	681a      	ldr	r2, [r3, #0]
 800064a:	687b      	ldr	r3, [r7, #4]
 800064c:	795b      	ldrb	r3, [r3, #5]
 800064e:	4619      	mov	r1, r3
				<< 2 * gpioHandle->GPIO_PIN_NUMBER);
 8000650:	687b      	ldr	r3, [r7, #4]
 8000652:	791b      	ldrb	r3, [r3, #4]
 8000654:	005b      	lsls	r3, r3, #1
 8000656:	fa01 f303 	lsl.w	r3, r1, r3
 800065a:	4619      	mov	r1, r3
		gpioHandle->pGPIO->GPIOx_MODER |= (gpioHandle->GPIO_MODE
 800065c:	687b      	ldr	r3, [r7, #4]
 800065e:	681b      	ldr	r3, [r3, #0]
 8000660:	430a      	orrs	r2, r1
 8000662:	601a      	str	r2, [r3, #0]
 8000664:	e002      	b.n	800066c <initGPIO+0x60>
	} else {
		// If it is INTERRUPT MODE
		initInterrupt(gpioHandle);
 8000666:	6878      	ldr	r0, [r7, #4]
 8000668:	f000 f863 	bl	8000732 <initInterrupt>
	}
	gpioHandle->pGPIO->GPIOx_PUPDR &= ~(0x3 << 2 * gpioHandle->GPIO_PIN_NUMBER);
 800066c:	687b      	ldr	r3, [r7, #4]
 800066e:	681b      	ldr	r3, [r3, #0]
 8000670:	68da      	ldr	r2, [r3, #12]
 8000672:	687b      	ldr	r3, [r7, #4]
 8000674:	791b      	ldrb	r3, [r3, #4]
 8000676:	005b      	lsls	r3, r3, #1
 8000678:	2103      	movs	r1, #3
 800067a:	fa01 f303 	lsl.w	r3, r1, r3
 800067e:	43db      	mvns	r3, r3
 8000680:	4619      	mov	r1, r3
 8000682:	687b      	ldr	r3, [r7, #4]
 8000684:	681b      	ldr	r3, [r3, #0]
 8000686:	400a      	ands	r2, r1
 8000688:	60da      	str	r2, [r3, #12]
	gpioHandle->pGPIO->GPIOx_PUPDR |= (gpioHandle->GPIO_SET_PUPD
 800068a:	687b      	ldr	r3, [r7, #4]
 800068c:	681b      	ldr	r3, [r3, #0]
 800068e:	68da      	ldr	r2, [r3, #12]
 8000690:	687b      	ldr	r3, [r7, #4]
 8000692:	7a1b      	ldrb	r3, [r3, #8]
 8000694:	4619      	mov	r1, r3
			<< 2 * gpioHandle->GPIO_PIN_NUMBER);
 8000696:	687b      	ldr	r3, [r7, #4]
 8000698:	791b      	ldrb	r3, [r3, #4]
 800069a:	005b      	lsls	r3, r3, #1
 800069c:	fa01 f303 	lsl.w	r3, r1, r3
 80006a0:	4619      	mov	r1, r3
	gpioHandle->pGPIO->GPIOx_PUPDR |= (gpioHandle->GPIO_SET_PUPD
 80006a2:	687b      	ldr	r3, [r7, #4]
 80006a4:	681b      	ldr	r3, [r3, #0]
 80006a6:	430a      	orrs	r2, r1
 80006a8:	60da      	str	r2, [r3, #12]
	if (gpioHandle->GPIO_MODE == OUTPUT) {
 80006aa:	687b      	ldr	r3, [r7, #4]
 80006ac:	795b      	ldrb	r3, [r3, #5]
 80006ae:	2b01      	cmp	r3, #1
 80006b0:	d13b      	bne.n	800072a <initGPIO+0x11e>
		gpioHandle->pGPIO->GPIOx_OTYPER &= ~(1 << gpioHandle->GPIO_PIN_NUMBER);
 80006b2:	687b      	ldr	r3, [r7, #4]
 80006b4:	681b      	ldr	r3, [r3, #0]
 80006b6:	685a      	ldr	r2, [r3, #4]
 80006b8:	687b      	ldr	r3, [r7, #4]
 80006ba:	791b      	ldrb	r3, [r3, #4]
 80006bc:	4619      	mov	r1, r3
 80006be:	2301      	movs	r3, #1
 80006c0:	408b      	lsls	r3, r1
 80006c2:	43db      	mvns	r3, r3
 80006c4:	4619      	mov	r1, r3
 80006c6:	687b      	ldr	r3, [r7, #4]
 80006c8:	681b      	ldr	r3, [r3, #0]
 80006ca:	400a      	ands	r2, r1
 80006cc:	605a      	str	r2, [r3, #4]
		gpioHandle->pGPIO->GPIOx_OTYPER |= (gpioHandle->GPIO_OUTPUT_TYPE
 80006ce:	687b      	ldr	r3, [r7, #4]
 80006d0:	681b      	ldr	r3, [r3, #0]
 80006d2:	685a      	ldr	r2, [r3, #4]
 80006d4:	687b      	ldr	r3, [r7, #4]
 80006d6:	799b      	ldrb	r3, [r3, #6]
 80006d8:	4619      	mov	r1, r3
				<< gpioHandle->GPIO_PIN_NUMBER);
 80006da:	687b      	ldr	r3, [r7, #4]
 80006dc:	791b      	ldrb	r3, [r3, #4]
 80006de:	fa01 f303 	lsl.w	r3, r1, r3
 80006e2:	4619      	mov	r1, r3
		gpioHandle->pGPIO->GPIOx_OTYPER |= (gpioHandle->GPIO_OUTPUT_TYPE
 80006e4:	687b      	ldr	r3, [r7, #4]
 80006e6:	681b      	ldr	r3, [r3, #0]
 80006e8:	430a      	orrs	r2, r1
 80006ea:	605a      	str	r2, [r3, #4]
		gpioHandle->pGPIO->GPIOx_OSPEEDR &= ~(0x3
 80006ec:	687b      	ldr	r3, [r7, #4]
 80006ee:	681b      	ldr	r3, [r3, #0]
 80006f0:	689a      	ldr	r2, [r3, #8]
				<< 2 * gpioHandle->GPIO_PIN_NUMBER);
 80006f2:	687b      	ldr	r3, [r7, #4]
 80006f4:	791b      	ldrb	r3, [r3, #4]
 80006f6:	005b      	lsls	r3, r3, #1
 80006f8:	2103      	movs	r1, #3
 80006fa:	fa01 f303 	lsl.w	r3, r1, r3
		gpioHandle->pGPIO->GPIOx_OSPEEDR &= ~(0x3
 80006fe:	43db      	mvns	r3, r3
 8000700:	4619      	mov	r1, r3
 8000702:	687b      	ldr	r3, [r7, #4]
 8000704:	681b      	ldr	r3, [r3, #0]
 8000706:	400a      	ands	r2, r1
 8000708:	609a      	str	r2, [r3, #8]
		gpioHandle->pGPIO->GPIOx_OSPEEDR |= (gpioHandle->GPIO_OUTPUT_SPEED
 800070a:	687b      	ldr	r3, [r7, #4]
 800070c:	681b      	ldr	r3, [r3, #0]
 800070e:	689a      	ldr	r2, [r3, #8]
 8000710:	687b      	ldr	r3, [r7, #4]
 8000712:	79db      	ldrb	r3, [r3, #7]
 8000714:	4619      	mov	r1, r3
				<< 2 * gpioHandle->GPIO_PIN_NUMBER);
 8000716:	687b      	ldr	r3, [r7, #4]
 8000718:	791b      	ldrb	r3, [r3, #4]
 800071a:	005b      	lsls	r3, r3, #1
 800071c:	fa01 f303 	lsl.w	r3, r1, r3
 8000720:	4619      	mov	r1, r3
		gpioHandle->pGPIO->GPIOx_OSPEEDR |= (gpioHandle->GPIO_OUTPUT_SPEED
 8000722:	687b      	ldr	r3, [r7, #4]
 8000724:	681b      	ldr	r3, [r3, #0]
 8000726:	430a      	orrs	r2, r1
 8000728:	609a      	str	r2, [r3, #8]
	}

}
 800072a:	bf00      	nop
 800072c:	3708      	adds	r7, #8
 800072e:	46bd      	mov	sp, r7
 8000730:	bd80      	pop	{r7, pc}

08000732 <initInterrupt>:

void initInterrupt(GPIO_HANDLE *gpioHandle) {
 8000732:	b480      	push	{r7}
 8000734:	b083      	sub	sp, #12
 8000736:	af00      	add	r7, sp, #0
 8000738:	6078      	str	r0, [r7, #4]

}
 800073a:	bf00      	nop
 800073c:	370c      	adds	r7, #12
 800073e:	46bd      	mov	sp, r7
 8000740:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000744:	4770      	bx	lr
	...

08000748 <setSpeedClock>:
////	} else{
////		pGPIO->GPIOx_ODR  &= ~(1 << GPIO_PIN_NUMBER);
////	}
//}

void setSpeedClock() {
 8000748:	b480      	push	{r7}
 800074a:	af00      	add	r7, sp, #0
	// SET SPEED CLOCK TO 100MHZ

	// Clear the latency bits
	FLASH_ACR &= ~FLASH_ACR_LATENCY;
 800074c:	4b42      	ldr	r3, [pc, #264]	; (8000858 <setSpeedClock+0x110>)
 800074e:	681b      	ldr	r3, [r3, #0]
 8000750:	4a41      	ldr	r2, [pc, #260]	; (8000858 <setSpeedClock+0x110>)
 8000752:	f023 0307 	bic.w	r3, r3, #7
 8000756:	6013      	str	r3, [r2, #0]
	// Set the latency to 3 wait states
	FLASH_ACR |= FLASH_ACR_LATENCY_3WS;
 8000758:	4b3f      	ldr	r3, [pc, #252]	; (8000858 <setSpeedClock+0x110>)
 800075a:	681b      	ldr	r3, [r3, #0]
 800075c:	4a3e      	ldr	r2, [pc, #248]	; (8000858 <setSpeedClock+0x110>)
 800075e:	f043 0302 	orr.w	r3, r3, #2
 8000762:	6013      	str	r3, [r2, #0]

	FLASH_ACR |= FLASH_ACR_PRFTEN;
 8000764:	4b3c      	ldr	r3, [pc, #240]	; (8000858 <setSpeedClock+0x110>)
 8000766:	681b      	ldr	r3, [r3, #0]
 8000768:	4a3b      	ldr	r2, [pc, #236]	; (8000858 <setSpeedClock+0x110>)
 800076a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800076e:	6013      	str	r3, [r2, #0]

	FLASH_ACR |= FLASH_ACR_ICEN;
 8000770:	4b39      	ldr	r3, [pc, #228]	; (8000858 <setSpeedClock+0x110>)
 8000772:	681b      	ldr	r3, [r3, #0]
 8000774:	4a38      	ldr	r2, [pc, #224]	; (8000858 <setSpeedClock+0x110>)
 8000776:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800077a:	6013      	str	r3, [r2, #0]
	FLASH_ACR |= FLASH_ACR_DCEN;
 800077c:	4b36      	ldr	r3, [pc, #216]	; (8000858 <setSpeedClock+0x110>)
 800077e:	681b      	ldr	r3, [r3, #0]
 8000780:	4a35      	ldr	r2, [pc, #212]	; (8000858 <setSpeedClock+0x110>)
 8000782:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000786:	6013      	str	r3, [r2, #0]

	HSI_EN();
 8000788:	4b34      	ldr	r3, [pc, #208]	; (800085c <setSpeedClock+0x114>)
 800078a:	681b      	ldr	r3, [r3, #0]
 800078c:	4a33      	ldr	r2, [pc, #204]	; (800085c <setSpeedClock+0x114>)
 800078e:	f043 0301 	orr.w	r3, r3, #1
 8000792:	6013      	str	r3, [r2, #0]
	while (!(RCC->CR & (1 << 1)))
 8000794:	bf00      	nop
 8000796:	4b31      	ldr	r3, [pc, #196]	; (800085c <setSpeedClock+0x114>)
 8000798:	681b      	ldr	r3, [r3, #0]
 800079a:	f003 0302 	and.w	r3, r3, #2
 800079e:	2b00      	cmp	r3, #0
 80007a0:	d0f9      	beq.n	8000796 <setSpeedClock+0x4e>
		; // Wait until HSI is ready
	PLL_DISABLE();
 80007a2:	4b2e      	ldr	r3, [pc, #184]	; (800085c <setSpeedClock+0x114>)
 80007a4:	681b      	ldr	r3, [r3, #0]
 80007a6:	4a2d      	ldr	r2, [pc, #180]	; (800085c <setSpeedClock+0x114>)
 80007a8:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80007ac:	6013      	str	r3, [r2, #0]
	while ((RCC->CR & (1 << 25)))
 80007ae:	bf00      	nop
 80007b0:	4b2a      	ldr	r3, [pc, #168]	; (800085c <setSpeedClock+0x114>)
 80007b2:	681b      	ldr	r3, [r3, #0]
 80007b4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80007b8:	2b00      	cmp	r3, #0
 80007ba:	d1f9      	bne.n	80007b0 <setSpeedClock+0x68>
		; // Wait until PLL is off
	PWR_CR &= VOS_SCALE_NOT_1_MODE;
 80007bc:	4b28      	ldr	r3, [pc, #160]	; (8000860 <setSpeedClock+0x118>)
 80007be:	681b      	ldr	r3, [r3, #0]
 80007c0:	4a27      	ldr	r2, [pc, #156]	; (8000860 <setSpeedClock+0x118>)
 80007c2:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80007c6:	6013      	str	r3, [r2, #0]
	PWR_CR |= VOS_SCALE_1_MODE;
 80007c8:	4b25      	ldr	r3, [pc, #148]	; (8000860 <setSpeedClock+0x118>)
 80007ca:	681b      	ldr	r3, [r3, #0]
 80007cc:	4a24      	ldr	r2, [pc, #144]	; (8000860 <setSpeedClock+0x118>)
 80007ce:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80007d2:	6013      	str	r3, [r2, #0]
	HSI_TO_PLL();
 80007d4:	4b21      	ldr	r3, [pc, #132]	; (800085c <setSpeedClock+0x114>)
 80007d6:	685b      	ldr	r3, [r3, #4]
 80007d8:	4a20      	ldr	r2, [pc, #128]	; (800085c <setSpeedClock+0x114>)
 80007da:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 80007de:	6053      	str	r3, [r2, #4]
	PLLM();
 80007e0:	4b1e      	ldr	r3, [pc, #120]	; (800085c <setSpeedClock+0x114>)
 80007e2:	685b      	ldr	r3, [r3, #4]
 80007e4:	4a1d      	ldr	r2, [pc, #116]	; (800085c <setSpeedClock+0x114>)
 80007e6:	f043 0310 	orr.w	r3, r3, #16
 80007ea:	6053      	str	r3, [r2, #4]
	PLLN();
 80007ec:	4b1b      	ldr	r3, [pc, #108]	; (800085c <setSpeedClock+0x114>)
 80007ee:	685b      	ldr	r3, [r3, #4]
 80007f0:	4a1a      	ldr	r2, [pc, #104]	; (800085c <setSpeedClock+0x114>)
 80007f2:	f443 5348 	orr.w	r3, r3, #12800	; 0x3200
 80007f6:	6053      	str	r3, [r2, #4]
	PLLP();
 80007f8:	4b18      	ldr	r3, [pc, #96]	; (800085c <setSpeedClock+0x114>)
 80007fa:	685b      	ldr	r3, [r3, #4]
 80007fc:	4a17      	ldr	r2, [pc, #92]	; (800085c <setSpeedClock+0x114>)
 80007fe:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8000802:	6053      	str	r3, [r2, #4]
	PLL_EN();
 8000804:	4b15      	ldr	r3, [pc, #84]	; (800085c <setSpeedClock+0x114>)
 8000806:	681b      	ldr	r3, [r3, #0]
 8000808:	4a14      	ldr	r2, [pc, #80]	; (800085c <setSpeedClock+0x114>)
 800080a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800080e:	6013      	str	r3, [r2, #0]
	while (!(RCC->CR & (1 << 25)))
 8000810:	bf00      	nop
 8000812:	4b12      	ldr	r3, [pc, #72]	; (800085c <setSpeedClock+0x114>)
 8000814:	681b      	ldr	r3, [r3, #0]
 8000816:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800081a:	2b00      	cmp	r3, #0
 800081c:	d0f9      	beq.n	8000812 <setSpeedClock+0xca>
		; // Wait until PLL is ready
	PLL_SYSTEM_CLOCK();
 800081e:	4b0f      	ldr	r3, [pc, #60]	; (800085c <setSpeedClock+0x114>)
 8000820:	689b      	ldr	r3, [r3, #8]
 8000822:	4a0e      	ldr	r2, [pc, #56]	; (800085c <setSpeedClock+0x114>)
 8000824:	f043 0302 	orr.w	r3, r3, #2
 8000828:	6093      	str	r3, [r2, #8]

	AHB_PRESCAL();
 800082a:	4b0c      	ldr	r3, [pc, #48]	; (800085c <setSpeedClock+0x114>)
 800082c:	689b      	ldr	r3, [r3, #8]
 800082e:	4a0b      	ldr	r2, [pc, #44]	; (800085c <setSpeedClock+0x114>)
 8000830:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8000834:	6093      	str	r3, [r2, #8]
	APB1_PRESCAL();
 8000836:	4b09      	ldr	r3, [pc, #36]	; (800085c <setSpeedClock+0x114>)
 8000838:	689b      	ldr	r3, [r3, #8]
 800083a:	4a08      	ldr	r2, [pc, #32]	; (800085c <setSpeedClock+0x114>)
 800083c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000840:	6093      	str	r3, [r2, #8]
	APB2_PRESCAL();
 8000842:	4b06      	ldr	r3, [pc, #24]	; (800085c <setSpeedClock+0x114>)
 8000844:	689b      	ldr	r3, [r3, #8]
 8000846:	4a05      	ldr	r2, [pc, #20]	; (800085c <setSpeedClock+0x114>)
 8000848:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 800084c:	6093      	str	r3, [r2, #8]
}
 800084e:	bf00      	nop
 8000850:	46bd      	mov	sp, r7
 8000852:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000856:	4770      	bx	lr
 8000858:	40023c00 	.word	0x40023c00
 800085c:	40023800 	.word	0x40023800
 8000860:	40007000 	.word	0x40007000

08000864 <__libc_init_array>:
 8000864:	b570      	push	{r4, r5, r6, lr}
 8000866:	4d0d      	ldr	r5, [pc, #52]	; (800089c <__libc_init_array+0x38>)
 8000868:	4c0d      	ldr	r4, [pc, #52]	; (80008a0 <__libc_init_array+0x3c>)
 800086a:	1b64      	subs	r4, r4, r5
 800086c:	10a4      	asrs	r4, r4, #2
 800086e:	2600      	movs	r6, #0
 8000870:	42a6      	cmp	r6, r4
 8000872:	d109      	bne.n	8000888 <__libc_init_array+0x24>
 8000874:	4d0b      	ldr	r5, [pc, #44]	; (80008a4 <__libc_init_array+0x40>)
 8000876:	4c0c      	ldr	r4, [pc, #48]	; (80008a8 <__libc_init_array+0x44>)
 8000878:	f000 f818 	bl	80008ac <_init>
 800087c:	1b64      	subs	r4, r4, r5
 800087e:	10a4      	asrs	r4, r4, #2
 8000880:	2600      	movs	r6, #0
 8000882:	42a6      	cmp	r6, r4
 8000884:	d105      	bne.n	8000892 <__libc_init_array+0x2e>
 8000886:	bd70      	pop	{r4, r5, r6, pc}
 8000888:	f855 3b04 	ldr.w	r3, [r5], #4
 800088c:	4798      	blx	r3
 800088e:	3601      	adds	r6, #1
 8000890:	e7ee      	b.n	8000870 <__libc_init_array+0xc>
 8000892:	f855 3b04 	ldr.w	r3, [r5], #4
 8000896:	4798      	blx	r3
 8000898:	3601      	adds	r6, #1
 800089a:	e7f2      	b.n	8000882 <__libc_init_array+0x1e>
 800089c:	080008c4 	.word	0x080008c4
 80008a0:	080008c4 	.word	0x080008c4
 80008a4:	080008c4 	.word	0x080008c4
 80008a8:	080008c8 	.word	0x080008c8

080008ac <_init>:
 80008ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80008ae:	bf00      	nop
 80008b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80008b2:	bc08      	pop	{r3}
 80008b4:	469e      	mov	lr, r3
 80008b6:	4770      	bx	lr

080008b8 <_fini>:
 80008b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80008ba:	bf00      	nop
 80008bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80008be:	bc08      	pop	{r3}
 80008c0:	469e      	mov	lr, r3
 80008c2:	4770      	bx	lr
